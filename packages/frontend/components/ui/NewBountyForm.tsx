import {
  Box,
  Input,
  FormControl,
  Text,
  HStack,
  Tooltip,
  Switch,
  Collapse,
  Flex,
  FormHelperText,
  Button,
  FormLabel,
  Spacer,
  Radio,
  RadioGroup,
  VStack,
  InputGroup,
  InputRightAddon,
} from '@chakra-ui/react';
import { ChevronDownIcon, ChevronUpIcon, DeleteIcon } from '@chakra-ui/icons'
import { useState, useRef } from 'react';

import PriceSelector from './PriceSelector';
import BountyLinks from '../bounty/BountyLinks';
import { RequiredBadge } from './RequiredBadge';
import PopoverGuide from './PopoverGuide';
import { useAppSelector, RootState } from '../../reducers/index'
import { truncateHash } from '../../lib/utils';
import { useAccount } from 'wagmi';
import VotingNFTSetter from './NFTSetter';
import { IoSparkles } from 'react-icons/io5';


// load quil editor dynamically
import dynamic from 'next/dynamic';
const QuillEditor = dynamic(() => import('./QuillEditor'), { ssr: false });



export default function NewBountyForm(props): JSX.Element {

  const { data } = useAccount();

  const connector = data.connector;
  const account = data.address;

  // get dashboard state
  const dashBoardState = useAppSelector((state: RootState) => { return state.dashBoard });
  const themeColor = dashBoardState.metadata?.themeColor;

  const setAmountInvalidity = ({ rewardAmountFiat, rewardAmountToken }) => {
    if (rewardAmountFiat === '' || rewardAmountToken === '') {
      setInvalidity((prev) => ({ ...prev, tokenAmount: '' }));
    }
  }

  const appDateRef = useRef(null);
  const checkMinDate = (e, field) => {

    // all dates should be at least one day from now
    if (e.target['value'] && e.target['value'] <= new Date().toISOString().split('T')[0]) {
      // add one day to the date
      const newDate = new Date();
      newDate.setDate(newDate.getDate() + 1);
      setBountyMetadata((prev) => ({ ...prev, [field]: newDate.toISOString().split('T')[0] }));
    }

  }

  const { invalidity, setInvalidity, bountyMetadata, setBountyMetadata, canUseGnosis } = props;

  const [show, setShow] = useState(true);

  const handleToggle = () => setShow(!show);


  const [loadingAutoGeneratedDescription, setloadingAutoGeneratedDescription] = useState(false);

  const handleGenerateDescription = () => {

    setloadingAutoGeneratedDescription(true);

    fetch(
      '/api/autotext',
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: `${bountyMetadata.name}`
        })
      }
    ).then(res => res.json()).then(data => {
      setBountyMetadata((prev) => ({ ...prev, description: data?.choices?.[0]?.text?.trim() }))
    }).finally(() => {
      setloadingAutoGeneratedDescription(false);
    });

  };

  return (
    <>
      <form onSubmit={(e) => {
        e.preventDefault();
        props.handleCreateBounty
      }}>


        <FormControl id="title" mt={1} mb={5}>
          <FormLabel fontWeight="bold">Title
            <RequiredBadge themeColor={themeColor} isInvalid={invalidity?.name}></RequiredBadge>
          </FormLabel>

          <FormHelperText mb={2}>
            {invalidity?.name ? "Please enter a title." : "Keep your title short and simple."}
          </FormHelperText>

          <Tooltip label={invalidity.name} placement='right' isOpen={invalidity.name.length > 0} >
            <Input
              name="title"
              isInvalid={invalidity?.name}
              errorBorderColor='red.300'
              type='text'
              placeholder='Project Title'
              borderRadius="10px"
              border="2px"
              shadow="sm"
              value={bountyMetadata.name || ''}
              onChange={(event) => {
                setInvalidity((prev) => ({ ...prev, name: '' }));
                setBountyMetadata((prev) => ({ ...prev, name: event.target.value }));
              }}
            />
          </Tooltip>
        </FormControl>




        <FormControl id="description" mt={1} mb={2}>
          <FormLabel fontWeight="bold">Description
            <RequiredBadge themeColor={themeColor} isInvalid={invalidity?.description}></RequiredBadge>
          </FormLabel>

          <FormHelperText mb={2}>
            <Flex direction={['column', 'column', 'row']}>


              {invalidity?.description ?
                <Text>Please enter a description.</Text> :

                <>
                  <Button
                    onClick={handleGenerateDescription}
                    isLoading={loadingAutoGeneratedDescription}
                    disabled={!bountyMetadata.name}
                    rounded="full"
                    size="xs"
                    colorScheme={themeColor}
                    leftIcon={<IoSparkles />}
                  >AI Autogenerate (BETA)</Button>
                </>
              }

            </Flex>
          </FormHelperText>
          <Tooltip label={invalidity.description} placement='right' isOpen={invalidity.description.length > 0} >
            <Box
              sx={{
                '& .quill': {
                  borderColor: 'gray.200',
                  borderWidth: '2px',
                  borderRadius: 'lg',
                  boxShadow: 'sm'
                },
                '& .ql-toolbar': {
                  borderBottomColor: 'gray.200',
                }
              }}
              border={invalidity?.description ? '4px solid red' : 'none'}
              borderColor='red.300'
              borderRadius='xl'
            >
              <QuillEditor
                // name="description"
                // isInvalid={invalidity.description.length > 0}
                // errorBorderColor='red.300'

                // placeholder="Describe your work and tasks in detail here."
                // mt={1}
                // rows={8}
                // borderRadius="10px"
                // border="2px"
                // shadow="sm"
                value={bountyMetadata?.description ?? ''}
                onChange={(event) => {
                  setInvalidity(prev => ({ ...prev, description: '' }));
                  setBountyMetadata((prev) => ({ ...prev, description: event.target['value'] }))
                }}
              />
            </Box>
          </Tooltip>

          {/* <ButtonGroup flexWrap="wrap" my="4">
            <Center fontWeight="bold">Templates: </Center>
            {
                descriptionTemplates.map(({label, content }, index) => (
                    <Button size="sm" variant="outline" fontWeight="medium" key={index} onClick={() => {
                        setBountyMetadata((prev) => ({...prev, description: content}));
                    } }>{label}</Button>
                )) 
            }
        </ButtonGroup> */}
        </FormControl>

        <BountyLinks invalidity={invalidity} setInvalidity={setInvalidity} bountyMetadata={bountyMetadata} setBountyMetadata={setBountyMetadata} />


        <HStack mb={5}>
          <FormControl>
            <FormLabel>
              <HStack>
                <Text fontWeight="bold">Deadline</Text>
                <RequiredBadge themeColor={themeColor} isInvalid={invalidity?.deadline} />

                <PopoverGuide
                  title="Deadlines"
                  text="Your project smart contract will automatically expires after this deadline and no additional work can be submitted past this date."
                />
              </HStack>
            </FormLabel>
            <FormHelperText mb={2}>
              {invalidity?.deadline ? "Please enter a deadline." : "Your project smart contract will expire after this date - set it carefully."}
            </FormHelperText>


            <Tooltip label={invalidity.deadline} placement='right' isOpen={invalidity.deadline.length > 0} >
              <InputGroup>
                <Input
                  type="date"
                  name="deadline"
                  value={bountyMetadata?.deadline}
                  isInvalid={invalidity.deadline.length > 0}
                  errorBorderColor='red.300'
                  borderRadius="10px"
                  border="2px"
                  shadow="sm"
                  placeholder="Deadline"
                  onBlur={(e) => checkMinDate(e, 'deadline')}
                  onChange={(event) => {
                    setInvalidity((prev) => ({ ...prev, deadline: '' }));
                    setBountyMetadata((prev) => ({ ...prev, deadline: event.target['value'] }));
                  }}
                />
                <InputRightAddon><Text fontWeight='bold'>UTC</Text></InputRightAddon>
              </InputGroup>
            </Tooltip>
          </FormControl>
        </HStack>

        <Box mb={5}>
          <FormControl>
            <FormLabel>
              <HStack>
                <Text fontWeight="bold">Total Reward Amount</Text>
                <RequiredBadge themeColor={themeColor} isInvalid={invalidity?.tokenAmount} />

                <PopoverGuide
                  title="Specify a reward amount in ETH, any ERC20 token or USD."
                  text="You can enter the token amount directly, or it's USD equivalent. If you're not sure how much to enter, add a small amount and set your bounty to allow additional funding."
                />
              </HStack>
            </FormLabel>
            {dashBoardState.metadata?.gnosis && (canUseGnosis ?
              <Box mb='3'>
                <FormHelperText>Select Funding Wallet</FormHelperText>
                <RadioGroup
                  mt='4'
                  value={!bountyMetadata?.gnosis ? 'wallet' : 'gnosis'}
                  onChange={(val) => {
                    if (val === 'wallet') {
                      setBountyMetadata((prev) => ({ ...prev, gnosis: null }));
                    } else {
                      setBountyMetadata((prev) => ({ ...prev, gnosis: dashBoardState.metadata?.gnosis }));
                    }
                  }}>
                  <VStack align='flex-start' gap='2'>
                    <Radio value="wallet">
                      <Text fontSize='sm' fontWeight={!bountyMetadata?.gnosis ? 'bold' : ''}>{connector?.name ?? 'Wallet'} ({truncateHash(account)})</Text>
                    </Radio>
                    <Radio value="gnosis">
                      <Text fontSize='sm' fontWeight={!bountyMetadata?.gnosis ? '' : 'bold'}>Gnosis Safe ({truncateHash(dashBoardState.metadata?.gnosis ?? '')})</Text>
                    </Radio>
                  </VStack>
                </RadioGroup>
              </Box>
              : <Text mb='3' color='red.500' fontSize='sm' >You can&apos;t use the Gnosis Safe of this board, for this bounty. As you are not a signatory to it. Use your connected wallet instead</Text>
            )
            }

            {/* <FormHelperText mb={2}>
              { dashBoardState.metadata?.gnosis && 
                <Flex align='center'  mb='2'>
                  <Text>Tokens will be requested from the Safe {dashBoardState.metadata?.gnosis} </Text> 
                  <Text textDecoration='underline' ml='2' cursor='pointer' onClick={gotoBoard}>Update</Text>
                </Flex>}
              {invalidity?.tokenAmount? "Please enter a token reward amount." : "Enter ETH or any ERC20 token, or a USD equivalent."}
          </FormHelperText> */}

            <PriceSelector gnosis={bountyMetadata?.gnosis ?? null} invalidity={{ rewardAmountFiat: invalidity.tokenAmount, rewardAmountToken: invalidity.tokenAmount }} setInvalidity={setAmountInvalidity} />
          </FormControl>
          <FormControl mt={6}>
            <FormLabel>
            <HStack>
              <Text fontWeight="bold">Number of Rewards</Text>
              <PopoverGuide
                title="Number of Rewards"
                text="If this reward pool will be split into equal parts, specify how many here. This information will be visible to your contributors."
              />
              </HStack>

            </FormLabel>
            <Input
              mt={2}
              borderWidth="medium"
              type="number"
              name="numRewards"
              // min={1}
              value={bountyMetadata?.numRewards}
              onChange={(event) => {
                setInvalidity((prev) => ({ ...prev, numberOfRewards: '' }));
                const num = parseInt(event.target['value']);
                // num = num ? num : 1;
                setBountyMetadata((prev) => ({ ...prev, numRewards: num }));
              }}
              onBlur={(event) => {
                let num = parseInt(event.target['value']);
                num = (num < 1 || !num) ? 1 : num;
                setBountyMetadata((prev) => ({ ...prev, numRewards: num }));
              }}
              />

          </FormControl>
        </Box>
        <Flex justify="space-between" borderBottomWidth="1px" borderBottomStyle="solid" borderBottomColor="grey.300" onClick={handleToggle} cursor="pointer" py={1} my={3} >
          <Text fontWeight="bold">Advanced Settings</Text>
          {show ? <ChevronUpIcon w={6} h={6} /> : <ChevronDownIcon w={6} h={6} />}
        </Flex>
        <Collapse in={show}>
          <HStack p={1} mb={2}>
            <Text fontSize="md">
              Allow external funding&nbsp;
              <PopoverGuide
                title="Additional Funding"
                text="You can allow anyone else to contribute additional tokens to this bounty. You as the issuer retain rights on how to distribute the bounty. Read more in our docs."
              />

          </Text>
          <Spacer />
          <Switch name="allow-e
          xternal-funding" 
          colorScheme={themeColor} 
          isChecked={bountyMetadata?.externalFunding}
          onChange={ (event) => {  setBountyMetadata((prev) => ({...prev, externalFunding: event.target.checked})) }} />
        </HStack>
        <HStack p={1} mb={2}>
          <Text fontSize="md">
            Require Application&nbsp;
            <PopoverGuide 
                      title="Require an Application" 
                      text="You can require contributors to apply for an opportunity before claiming any funds, as well as optionally set a close date for applications. This is useful for bigger projects that have specialized contributor requirements." 
                  />
          </Text>
          <Spacer />
          <Switch 
            name="requires-application" 
            colorScheme={themeColor} 
            isChecked={bountyMetadata?.requiresApplication}
            isDisabled={bountyMetadata?.voting}
            onChange={ (event) => {  setBountyMetadata((prev) => ({...prev, requiresApplication: event.target['checked']})) }} />
        </HStack>
        {bountyMetadata?.requiresApplication && 
        <FormControl mb={3} p={1} isDisabled={!bountyMetadata.requiresApplication}>
            <FormLabel mb="0" fontSize="sm">Application Close Date (Optional)</FormLabel>
            <HStack>
                <Input 
                    type="date" 
                    ref={appDateRef}
                    value={bountyMetadata?.applicationsDeadline ?? ''} 

                    onBlur={ (e) => checkMinDate(e, 'applicationsDeadline') }
                    onInput={(e) => {
                        setBountyMetadata((prev) => ({...prev, applicationsDeadline: e.target['value']}));
                    }} />
                    <Button 
                        isDisabled={!bountyMetadata.requiresApplication} 
                        borderRadius="md"
                        onClick={() => {
                            if(appDateRef.current) {
                                appDateRef.current.value = '';
                            }
                            setBountyMetadata((prev) => ({...prev, applicationsDeadline: ''}));
                        }}
                        ><DeleteIcon /></Button>
            </HStack>
        </FormControl> }
        <HStack p={1} mb={2}>
          <Text fontSize="md">
            Make Submissions Public&nbsp;
            <PopoverGuide 
                      title="Public Submissions" 
                      text="You can make the bounty claims visible to all for transparency, or so you can get feedback on contributor claims." 
                  />
          </Text>
          <Spacer />
          <Switch 
            name="public-submissions" 
            colorScheme={themeColor}
            isChecked={bountyMetadata?.publicSubmissions}
            isDisabled={bountyMetadata?.voting}
            onChange={ (event) => {  setBountyMetadata((prev) => ({...prev, publicSubmissions: event.target['checked']})) }} />
        </HStack>

          <HStack p={1}>
            <Text fontSize="md">
              Enable Voting on Proposals&nbsp;
              <PopoverGuide
                title="Community Voting for Proposals"
                text="You can allow your community to vote for the best submissions. Enabling this will require you to set a voting start and end date. You can also set a requirement that voters own a specific NFT (ERC721 or 1155)."
              />
            </Text>
            <Spacer />
            <Switch
              name="public-submissions"
              colorScheme={themeColor}
              isChecked={bountyMetadata?.voting}
              onChange={(event) => { setBountyMetadata((prev) => ({ ...prev, voting: event.target['checked'] })) }} />
          </HStack>
          {bountyMetadata?.voting &&
            <>
              <HStack p={1} gap='2'>
                <FormControl>
                  <FormLabel mb="0" fontSize="sm">Voting start date</FormLabel>
                  <Tooltip label={invalidity.votingStart} placement='bottom' isOpen={invalidity.votingStart.length > 0} >
                    <Input
                      type="date"
                      value={bountyMetadata?.votingStart ?? ''}
                      isInvalid={invalidity?.votingStart}
                      errorBorderColor='red.300'
                      onBlur={(e) => checkMinDate(e, 'votingStart')}
                      onInput={(e) => {
                        setInvalidity((prev) => ({ ...prev, votingStart: '' }));
                        setBountyMetadata((prev) => ({ ...prev, votingStart: e.target['value'] }));
                      }} />
                  </Tooltip>
                </FormControl>
                <FormControl>
                  <FormLabel mb="0" fontSize="sm">Voting end date</FormLabel>
                  <Tooltip label={invalidity.votingEnd} placement='bottom' isOpen={invalidity.votingEnd.length > 0} >
                    <Input
                      type="date"
                      value={bountyMetadata?.votingEnd ?? ''}
                      isInvalid={invalidity?.votingEnd}
                      errorBorderColor='red.300'
                      onBlur={(e) => checkMinDate(e, 'votingEnd')}
                      onInput={(e) => {
                        setInvalidity((prev) => ({ ...prev, votingEnd: '' }));
                        setBountyMetadata((prev) => ({ ...prev, votingEnd: e.target['value'] }));
                      }} />
                  </Tooltip>

                </FormControl>
              </HStack>
              {bountyMetadata?.votingNFT ?

                <Flex direction={['column', 'row', 'row']}>
                  <Text textAlign="left" fontSize="smaller">Only holders of this NFT contract are allowed to vote for submissions.<br /> {bountyMetadata.votingNFT}</Text>
                  <Spacer /><Button
                    colorScheme={themeColor}
                    size='sm'
                    variant='outline'
                    onClick={() => {
                      setBountyMetadata((prev: any) => ({
                        ...prev,
                        votingNFT: null
                      }))
                    }}>Remove</Button></Flex>
                :
                <VotingNFTSetter label='Tokengate by NFT' nft={bountyMetadata?.votingNFT} themeColor={themeColor} setNft={(value, onClose) => {
                  setBountyMetadata((prev: any) => ({
                    ...prev,
                    votingNFT: value
                  }))
                  onClose();
                }} />
              }
            </>
          }
        </Collapse>
      </form>
    </>
  )
}